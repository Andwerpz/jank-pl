(* EBNF definition of the EBNF I'm going to use *)

letter = "A" | "B" | "C" | "D" | "E" | "F" | "G"
       | "H" | "I" | "J" | "K" | "L" | "M" | "N"
       | "O" | "P" | "Q" | "R" | "S" | "T" | "U"
       | "V" | "W" | "X" | "Y" | "Z" | "a" | "b"
       | "c" | "d" | "e" | "f" | "g" | "h" | "i"
       | "j" | "k" | "l" | "m" | "n" | "o" | "p"
       | "q" | "r" | "s" | "t" | "u" | "v" | "w"
       | "x" | "y" | "z" | "_" ;
digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
symbol = "[" | "]" | "{" | "}" | "(" | ")" | "<" | ">"                  (* everything except for double quotes and backslash *)
       | "'" | "=" | "|" | "." | "," | ";" | "-" | "+" 
       | "*" | "?" | ":" | "!" | "@" | "#" | "$" | "%"
       | "^" | "&" | "/" | "~" | "`" ;
escape = "\\" , ( "n" | "t" | "r" | "f" | "b" | "\"" | "\\" ) ;

identifier = < letter > ;

(* comments can contain everything except for asterisks *)
(* also, idk a better way to handle this without implementing set subtraction in the grammar *)
comment_char    = letter | digit | ws 
                | "[" | "]" | "{" | "}" | "(" | ")" | "<" | ">"         (* everything that symbol has except for the asterisk *)
                | "'" | "=" | "|" | "." | "," | ";" | "-" | "+"         (* but including double quotes and backslash *)
                | "?" | ":" | "!" | "@" | "#" | "$" | "%" | "^"
                | "&" | "/" | "~" | "`" | "\\" | "\"" ;
comment = "(*" , { comment_char } , "*)" ;
ws = " " | "\n" | "\t" | "\r" | "\f" | "\b" | comment ;   (* treat comments as whitespace *)
rws = < ws > ;                                       (* required whitespace *)
ows = { ws } ;                                            (* optional whitespace *)

terminal_char = letter | digit | symbol | escape | " " ;
terminal = "\"" , < terminal_char > , "\"" ;

term = "(" , rws , alternation , rws , ")"      (* grouping *)
     | "[" , rws , alternation , rws , "]"      (* zero or one *)
     | "{" , rws , alternation , rws , "}"      (* zero or more *)
     | "<" , rws , alternation , rws , ">"      (* one or more *)
     | terminal
     | identifier ;                     

concatenation = term , { rws , "," , rws , term } ;
alternation = concatenation , { rws , "|" , rws , concatenation } ;

rule = identifier , rws , "=" , rws , alternation , rws , ";" ;
include = "#include" , rws , terminal , rws , ";" ;
grammar = { ows , include } , { ows , rule } , ows ;