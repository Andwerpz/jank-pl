#include "expression.ebnf" ;
#include "function.ebnf" ;

(* I loooove dylan janky *)
(*
TODO
 - global variables
*)

alpha   = "A" | "B" | "C" | "D" | "E" | "F" | "G"
        | "H" | "I" | "J" | "K" | "L" | "M" | "N"
        | "O" | "P" | "Q" | "R" | "S" | "T" | "U"
        | "V" | "W" | "X" | "Y" | "Z" | "a" | "b"
        | "c" | "d" | "e" | "f" | "g" | "h" | "i"
        | "j" | "k" | "l" | "m" | "n" | "o" | "p"
        | "q" | "r" | "s" | "t" | "u" | "v" | "w"
        | "x" | "y" | "z" ;
digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
escape = "\\" , ( "n" | "t" | "r" | "f" | "b" | "\"" | "\\" | "'" | "0" ) ;
symbol = "[" | "]" | "{" | "}" | "(" | ")" | "<" | ">"                  (* any symbol that is valid to type within a string *)
       | "=" | "|" | "." | "," | ";" | "-" | "+" | "_"
       | "*" | "?" | ":" | "!" | "@" | "#" | "$" | "%"
       | "^" | "&" | "/" | "~" | "`" ;

line_comment = "//" , { alpha | digit | " " } , "\n" ;
multiline_comment = "/*" , { alpha | digit | " " | "\n" } , "*/" ;

(* 
structures should define whitespace within themselves. 
Whitespace outside will be defined by an enclosing structure 
the only exception is 'program', which needs to define whitespace outside of itself as it doesn't have any enclosing structure
*)
ws = " " | "\n" | "\t" | "\r" | "\f" | "\b" 
   | line_comment | multiline_comment ;         (* whitespace *)
rws = < ws > ;                                  (* required whitespace *)
ows = { ws } ;                                  (* optional whitespace *)

type = pointer_type | base_type ;
pointer_type = base_type , < "*" > ;
base_type = alpha , { alpha | digit | "_" } ;

identifier = alpha , { alpha | digit | "_" } ;

(* int a = b *)
declaration = type , rws , identifier , ows , "=" , ows , expression ;
(* a = b *)
assignment = identifier , { ows , "[" , ows , expression , ows , "]" } , ows , "=" , ows , expression ;

(* int foo *)
parameter = type , rws , identifier ;
parameter_list = [ parameter , { ows , "," , ows , parameter } ] ;
argument_list = [ expression , { ows , "," , ows , expression } ] ;

statement = simple_statement
          | control_statement
          | compound_statement ;
simple_statement = declaration , ows , ";" 
                 | function_call , ows , ";" 
                 | "return" , [ rws , expression ] , ows , ";" 
                 | assignment , ows , ";" ;
control_statement = "if" , ows , "(" , ows ,  expression , ows , ")" , ows , statement , [ rws , "else" , rws , statement ]
                  | "while" , ows , "(" , ows , expression , ows , ")" , ows , statement 
                  | "for" , ows , "(" , ows , [ declaration ] , ows , ";" , ows , [ expression ] , ows , ";" , ows , [ assignment ] , ows , ")" , ows , statement ;
compound_statement = "{" , ows , { statement , ows } , "}" ;

program = { ows , function } , ows ;

