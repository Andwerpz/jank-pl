#include "expression.ebnf" ;
#include "function.ebnf" ;
#include "struct.ebnf" ;
#include "overload.ebnf" ;
#include "literal.ebnf" ;
#include "inline_asm.ebnf" ;

(* I loooove dylan janky *)

alpha   = "A" | "B" | "C" | "D" | "E" | "F" | "G"
        | "H" | "I" | "J" | "K" | "L" | "M" | "N"
        | "O" | "P" | "Q" | "R" | "S" | "T" | "U"
        | "V" | "W" | "X" | "Y" | "Z" | "a" | "b"
        | "c" | "d" | "e" | "f" | "g" | "h" | "i"
        | "j" | "k" | "l" | "m" | "n" | "o" | "p"
        | "q" | "r" | "s" | "t" | "u" | "v" | "w"
        | "x" | "y" | "z" ;
digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
escape = "\\" , ( "n" | "t" | "r" | "f" | "b" | "\"" | "\\" | "'" | "0" ) ;
symbol = "[" | "]" | "{" | "}" | "(" | ")" | "<" | ">"                  (* any symbol that is valid to type within a string *)
       | "=" | "|" | "." | "," | ";" | "-" | "+" | "_"
       | "*" | "?" | ":" | "!" | "@" | "#" | "$" | "%"
       | "^" | "&" | "/" | "~" | "`" ;

line_comment = "//" , { alpha | digit | symbol | "\"" | "'" | " " | "\\" } , "\n" ;
multiline_comment = "/*" , { alpha | digit | " " | "\n" } , "*/" ;

(* 
structures should define whitespace within themselves. 
Whitespace outside will be defined by an enclosing structure 
the only exception is 'program', which needs to define whitespace outside of itself as it doesn't have any enclosing structure
*)
ws = " " | "\n" | "\t" | "\r" | "\f" | "\b" 
   | line_comment | multiline_comment ;         (* whitespace *)
rws = < ws > ;                                  (* required whitespace *)
ows = { ws } ;                                  (* optional whitespace *)

base_type = alpha , { alpha | digit | "_" } ;
templated_type = base_type , [ "<" , ows , templated_type , { ows , "," , ows , templated_type } , ows , ">" ] , { "*" | "[" , literal_integer , "]" } ;
function_pointer_type = "fn" , "<" , ows , type , ows , "(" , ows , type_list , ows , ")" , ows , ">" ;
type = ( function_pointer_type | templated_type ) , [ "&" ] ;

template_header = "template" , ows , "<" , ows , base_type , { ows , "," , ows , base_type } , ows , ">" ;

identifier = ( alpha | "_" ) , { alpha | digit | "_" } ;

(* int a = b *)
declaration = type , rws , identifier , [ ows , "=" , ows , expression ] ;

(* int foo *)
parameter = type , rws , identifier ;

type_list = [ type , { ows , "," , ows , type } ] ;
parameter_list = [ parameter , { ows , "," , ows , parameter } ] ;
argument_list = [ expression , { ows , "," , ows , expression } ] ;
identifier_list = [ identifier , { ows , "," , ows , identifier } ] ;

statement = simple_statement
          | control_statement
          | compound_statement ;
simple_statement = "return" , [ rws , expression ] , ows , ";"
                 | "break" , ows , ";" 
                 | "continue" , ows , ";" 
                 | declaration , ows , ";" 
                 | expression , ows , ";" 
                 | inline_asm , ows , ";" ;
control_statement = "if" , ows , "(" , ows ,  expression , ows , ")" , ows , statement , [ rws , "else" , rws , statement ]
                  | "while" , ows , "(" , ows , expression , ows , ")" , ows , statement 
                  | "for" , ows , "(" , ows , [ declaration ] , ows , ";" , ows , [ expression ] , ows , ";" , ows , [ expression ] , ows , ")" , ows , statement ;
compound_statement = "{" , ows , { statement , ows } , "}" ;

library_path = "<" , identifier , ">" ;
include = "#include" , rws , ( literal_string | library_path ) , ows , ";" ;

_typedef = "typedef" , rws , type , rws , base_type , ows , ";" ; 

global_node = "#global_node" , rws , identifier , [ ows , "[" , identifier_list , "]" ] , ows , ";" ;
global_declaration = [ "[" , ows , identifier , ows , "]" , ows ] , [ "extern" , rws ] , declaration , ows , ";" ;

program = { ows , ( function | struct_definition | templated_function | templated_struct_definition | overload | templated_overload | include | global_declaration | global_node | _typedef ) } , ows ;

