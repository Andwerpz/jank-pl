#include "jank.ebnf" ;
#include "function.ebnf" ;
#include "literal.ebnf" ;
#include "struct.ebnf" ;

(* in order of precedence *)
(* x[<expr>] x.<id> x-><id> x.<fn> x-><fn> x++ x-- *)
(* +x -x ~x !x ++x --x <deref>x @x (cast)x *)
(* <mult> / % *)
(* + - *)
(* << >> *)
(* < <= > >= *)
(* == != *)
(* & *)
(* ^ *)
(* | *)
(* && *)
(* || *)
(* = += -= <mult>= /= %= <<= >>= &= ^= |= *) 
(* , *) (* as of right now, the comma operator is not supported because it conflicts with function calls *)

expr_primary = literal | constructor_call | function_call | identifier | "(" , ows , expression , ows , ")" ;
expr_postfix = expr_primary , { ows , ( "[" , ows , expression , ows , "]" | "." , ows , function_call | "->" , ows , function_call | "." , ows , identifier | "->" , ows , identifier | "++" | "--" ) } ;
expr_unary = ( "++" | "--" | "+" | "-" | "~" | "!" | "*" | "@" | "(" , type , ")" ) , ows , expr_unary | expr_postfix ;
expr_multiplicative = expr_unary , { ows , ( "*" | "/" | "%" ) , ows , expr_unary } ;
expr_additive = expr_multiplicative , { ows , ( "+" | "-" ) , ows , expr_multiplicative } ;
expr_shift = expr_additive , { ows , ( "<<" | ">>" ) , ows , expr_additive } ;
expr_relational = expr_shift , { ows , ( "<=" | "<" | ">=" | ">" ) , ows , expr_shift } ;   (* must have '<=' before '<' to support greedy parsing *)
expr_equality = expr_relational , { ows , ( "==" | "!=" ) , ows , expr_relational } ;
expr_bit_and = expr_equality , { ows , "&" , ows , expr_equality } ;
expr_bit_xor = expr_bit_and , { ows , "^" , ows , expr_bit_and } ;
expr_bit_or = expr_bit_xor , { ows , "|" , ows , expr_bit_xor } ;
expr_logical_and = expr_bit_or , { ows , "&&" , ows , expr_bit_or } ;
expr_logical_or = expr_logical_and , { ows , "||" , ows , expr_logical_and } ;
expr_assignment = expr_logical_or , { ows , ( "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "<<=" | ">>=" | "&=" | "^=" | "|=" ) , ows , expr_logical_or } ;
expression = expr_assignment ;