#include <iostream>;

// simple bump allocator
// just increases the heap size every time we want to allocate more memory.

void* sbrk(u64 inc) {
    //find current break
    u64 cur_brk = sys_brk($u64 0);

    //set new breakpoint inc bytes ahead
    sys_brk(cur_brk + inc);

    //return old breakpoint address
    return $void* cur_brk;
}

//void* _malloc(u64 sz) {
//    return sbrk(sz);
//}

//mmap allocator. Essentially pushing the task of memory management to the OS. We can now free using munmap.
//the downside is that the resolution of our allocs becomes 4KB.  

//need to set a very high priority on global variables that are required for malloc as we'll segfault
//if these variables are unset when trying to initialize something else that requires malloc

// memory protection flags
[-10] u64 PROT_NONE = $u64 0;
[-10] u64 PROT_READ = $u64 1;
[-10] u64 PROT_WRITE = $u64 2;
[-10] u64 PROT_EXEC = $u64 4;

// mmap option flags
[-10] u64 MAP_PRIVATE = $u64 1 << $u64 1;
[-10] u64 MAP_ANONYMOUS = $u64 1 << $u64 5;

[-10] u64 PAGE_SIZE = $u64 4096;
[-10] u64 MEM_USED = $u64 0;

void* malloc(u64 sz) {
    //round sz up to nearest page size
    sz = (sz + PAGE_SIZE - $u64 1) / PAGE_SIZE * PAGE_SIZE;
    MEM_USED += sz;

    void* addr = sys_mmap(nullptr, sz, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, $u64 0);
    return addr;
}

i32 free(void* addr, u64 sz) {
    //round sz up to nearest page size
    sz = (sz + PAGE_SIZE - $u64 1) / PAGE_SIZE * PAGE_SIZE;
    if(sz > MEM_USED) {
        cout << "free failed, trying to dealloc too much memory\n";
        sys_exit(1);
    }
    MEM_USED -= sz;

    i32 status = sys_munmap(addr, sz);
    if(status == -1) {
        cout << "free failed : " << $u64 addr << " " << sz << "\n";
        sys_exit(1);
    }
    return status;
}