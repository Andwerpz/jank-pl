
//the elements in range [0, sz) will be valid instances of T.

template<T>
struct vector {
    u64 cap;
    u64 sz;
    T* arr;

    vector() {
        this.cap = $u64 1;
        this.sz = $u64 0;
        this.arr = $T* malloc(sizeof(T) * this.cap);
    }

    vector(vector& other) {
        this.cap = other.cap;
        this.sz = other.sz;
        this.arr = $T* malloc(sizeof(T) * this.cap);
        for(u64 i = $u64 0; i < this.sz; i++) this.arr[i] := other.arr[i];
    }

    vector(u64 n, T default) {
        this.cap = n;
        this.sz = n;
        if(this.cap == $u64 0) this.cap = $u64 1;
        this.arr = $T* malloc(sizeof(T) * this.cap);
        for(u64 i = $u64 0; i < this.sz; i++) this.arr[i] := default;
    }

    vector(i32 n, T default) {
        this.cap = $u64 n;
        this.sz = $u64 n;
        if(this.cap == $u64 0) this.cap = $u64 1;
        this.arr = $T* malloc(sizeof(T) * this.cap);
        for(u64 i = $u64 0; i < this.sz; i++) this.arr[i] := default;
    }

    ~vector() {
        for(u64 i = 0x0; i < this.sz; i++) this.arr[i].~();
        free($void* this.arr, this.cap * sizeof(T));
    }

    void grow() {
        u64 old_cap = this.cap;
        this.cap = this.cap * $u64 2;
        T* narr = $T* malloc(sizeof(T) * this.cap);
        for(u64 i = $u64 0; i < this.sz; i++) {
            narr[i] := this.arr[i];
        }
        for(u64 i = 0x0; i < this.sz; i++) this.arr[i].~();
        free($void* this.arr, old_cap * sizeof(T));
        this.arr = narr;
    }

    void pop_back() {
        if(this.sz == $u64 0) return;
        this.sz = this.sz - $u64 1;
        this.arr[this.sz].~();
    }

    void push_back(T x) {
        if(this.sz == this.cap) this.grow();
        this.arr[this.sz] := x;
        this.sz = this.sz + $u64 1;
    }

    u64 size() {
        return this.sz; 
    }
}

template<T>
T& operator[](vector<T>& a, u64 ind) {
    return a.arr[ind];
}

template<T>
T& operator[](vector<T>& a, i32 ind) {
    return a.arr[ind];
}
