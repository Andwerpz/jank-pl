#include <jstring>;

#global_node STRING [MALLOC];

[__GLOBAL_FIRST__] u64 U64_MAX = $u64 -1;
[__GLOBAL_FIRST__] u32 U32_MAX = $u32 -1;
[__GLOBAL_FIRST__] u16 U16_MAX = $u16 -1;
[__GLOBAL_FIRST__] u8 U8_MAX = $u8 -1;

[__GLOBAL_FIRST__] i32 I32_MAX = 2147483647;
[__GLOBAL_FIRST__] i32 I32_MIN = -2147483647 - 1;

struct string {
    u64 cap;
    u64 sz;
    u8* arr;

    string() {
        this.cap = $u64 1;
        this.sz = $u64 0;
        this.arr = $u8* malloc(this.cap);
    }

    string(string& other) {
        this.cap = other.cap;
        this.sz = other.sz;
        this.arr = $u8* malloc(this.cap);
        for(u64 i = $u64 0; i < this.sz; i++) this.arr[i] = other.arr[i];
    }

    string(u8* jstr) {
        this.cap = strlen(jstr);
        this.sz = this.cap;
        if(this.cap == $u64 0) this.cap = $u64 1;
        this.arr = $u8* malloc(this.cap);
        for(u64 i = $u64 0; i < this.sz; i++) this.arr[i] = jstr[i];
    }

    string(u64 n, u8 default) {
        this.cap = n;
        this.sz = n;
        if(this.cap == $u64 0) this.cap = $u64 1;
        this.arr = $u8* malloc(this.cap);
        for(u64 i = $u64 0; i < this.sz; i++) this.arr[i] = default;
    }

    string(i32 n, u8 default) {
        this.cap = $u64 n;
        this.sz = $u64 n;
        if(this.cap == $u64 0) this.cap = $u64 1;
        this.arr = $u8* malloc(this.cap);
        for(u64 i = $u64 0; i < this.sz; i++) this.arr[i] = default;
    }

    ~string() {
        free($void* this.arr, this.cap);
    }

    void grow() {
        u64 old_cap = this.cap;
        this.cap = this.cap * $u64 2;
        u8* narr = $u8* malloc(this.cap);
        for(u64 i = $u64 0; i < this.sz; i++) {
            narr[i] = this.arr[i];
        }
        free($void* this.arr, old_cap);
        this.arr = narr;
    }

    void pop_back() {
        if(this.sz == $u64 0) return;
        this.sz = this.sz - $u64 1;
    }

    void push_back(u8 x) {
        if(this.sz == this.cap) this.grow();
        this.arr[this.sz] = x;
        this.sz = this.sz + $u64 1;
    }

    u64 size() {
        return this.sz; 
    }

    u8* jstr() {
        u8* ret = $u8* malloc(this.sz + $u64 1);
        for(u64 i = $u64 0; i < this.sz; i++){
            ret[i] = this.arr[i];
        }
        ret[this.sz] = '\0';
        return ret;
    }

    void reverse() {
        for(u64 i = $u64 0; i < this.sz / $u64 2; i++){
            u8 tmp = this[i];
            this[i] = this[this.sz - $u64 1 - i];
            this[this.sz - $u64 1 - i] = tmp;
        }
    }
}

u8& operator[](string& a, u64 ind) {
    return a.arr[ind];
}

u8& operator[](string& a, i32 ind) {
    return a.arr[ind];
}

i32 operator==(string& a, string& b) {
    if(a.size() != b.size()) return 0;
    for(u64 i = $u64 0; i < a.size(); i++) {
        if(a[i] != b[i]) return 0;
    }
    return 1;
}

i32 operator==(string& a, u8* b) {
    if(a.size() != strlen(b)) return 0;
    for(u64 i = $u64 0; i < a.size(); i++) {
        if(a[i] != b[i]) return 0;
    }
    return 1;
}
i32 operator==(u8* a, string& b) {
    return b == a;
}

string to_string(u64 x) {
    if(x == $u64 0) return new string("0");
    string ret = new string();
    while(x) {
        ret.push_back('0' + $u8 (x % $u64 10));
        x /= $u64 10;
    }
    ret.reverse();
    return ret;
}

string to_string(u32 x) {
    return to_string($u64 x);
}

string to_string(u16 x) {
    return to_string($u64 x);
}

string to_string(i32 x) {
    if(x == 0) return new string("0");
    string ret = new string();
    i32 is_neg = 0;
    if(x < 0) {
        is_neg = 1;
        x *= -1;
    }
    while(x) {
        ret.push_back('0' + $u8 (x % 10));
        x /= 10;
    }
    if(is_neg) ret.push_back('-');
    ret.reverse();
    return ret;
}

//jank implementation of float to string
//each float consists of
// - 1 sign bit
// - 8 exponent bits
// - 23 mantissa bits (+1 implied bit) 

//normally, the value represented is equal to
// (-1)^sign + 2^(exp - 127) * (1 + mantissa / 2^23)
//except for when exp == 0, then the value is 
// (-1)^sign + 2^(-126) * (mantissa / 2^23)
//and when exp == 255, the value is 
// (-1)^sign * inf

//so my idea is to construct the base 2 representation of the float, this is exact. 
//can then represent the integer portion exactly using decimal,
//represent the fractional portion approximately by using bigint addition
//currently doesn't have bigint addition, so can only accurately print floats of magnitude up to 2^60
//also doesn't account for denormalization, NaN, inf. 

[STRING] u8* jstring_f32_base2 = $u8* malloc($u64 512);

string to_string(f32 f) {
    u32 fbits = * $u32* (@f);

    u32 sgn = (fbits & $u32 (1 << 31));
    u32 exp = (fbits & $u32 (((1 << 8) - 1) << 23));
    u32 mantissa = (fbits & $u32 ((1 << 23) - 1));

    sgn >>= $u32 31;
    exp >>= $u32 23;
    mantissa >>= $u32 0;
    mantissa |= $u32 (1 << 23);    //implied bit

    //generate exact base2 representation 
    u8* base2 = jstring_f32_base2;
    for(i32 i = 0; i < 512; i++){
        base2[i] = $u8 0;
    }

    u64 zind = $u64 255;
    for(u32 i = $u32 0; i < $u32 24; i++){
        u64 ind = zind + $u64 exp - $u64 127 + $u64 i - $u64 23;
        if(mantissa & $u32 (1 << $i32 i)) base2[ind] = $u8 1;
    }

    //generate int portion
    u64 int_por = $u64 0;
    for(i32 i = 0; i < 60; i++){
        if(base2[i + $i32 zind]) int_por += ($u64 1 << $u64 i);
    }

    //generate fractional portion
    i32 frac_precision = 13;
    u64 frac_por = $u64 0;
    u64 pow2 = $u64 1;
    for(i32 i = 0; i < frac_precision; i++){
        pow2 *= $u64 10;
    }
    pow2 /= $u64 2;
    for(i32 i = $i32 zind - 1; i >= 0; i--){
        if(base2[i]) frac_por += pow2;
        pow2 /= $u64 2;
    }

    string int_str = to_string(int_por);
    string frac_str = to_string(frac_por);

    i32 int_len = $i32 int_str.size();
    i32 frac_len = $i32 frac_str.size();
    i32 len = int_len + frac_precision + 1;
    if(sgn) len += 1;

    string out_str = new string();
    if(sgn) out_str.push_back('-');
    for(i32 i = 0; i < int_len; i++) out_str.push_back(int_str[i]);
    out_str.push_back('.');
    for(i32 i = 0; i < frac_precision - frac_len; i++) out_str.push_back('0');
    for(i32 i = 0; i < frac_len; i++) out_str.push_back(frac_str[i]);
    
    return out_str;
}

//if s is not a valid unsigned integer, sets ERR_MALFORMED
//if s is out of range, sets ERR_RANGE
//leading '0's are 
u64 stou64(string s) {
    //is string empty?
    if(s.size() == $u64 0) {
        errno = ERR_MALFORMED;
        return $u64 -1;
    }
    u64 ptr = $u64 0;

    u64 ans = $u64 0;
    for(i32 i = 0; i < $i32 s.size(); i++){
        u8 c = s[i];

        //is next char a digit?
        if(c < '0' || c > '9') {
            errno = ERR_MALFORMED;
            return $u64 -1;
        }
        u64 dig = $u64 (c - '0');
        
        //check for overflow
        if(ans > (U64_MAX - dig) / $u64 10) {
            errno = ERR_RANGE;
            return $u64 -1;
        }
        ans = ans * $u64 10 + $u64 (c - '0');
    }
    return ans;
}

//if s is not a valid signed integer, sets ERR_MALFORMED
//if s is out of range, sets ERR_RANGE
i32 stoi32(string s) {
    //is string empty?
    if(s.size() == $u64 0) {
        errno = ERR_MALFORMED;
        return -1;
    }
    u64 ptr = $u64 0;

    //is negative?
    i32 is_neg = 0;
    if(s[ptr] == '-') {
        is_neg = 1;
        ptr ++;
    }

    //are there no digits?
    if(s.size() == ptr) {
        errno = ERR_MALFORMED;
        return -1;
    }

    //skip leading '0's
    while(ptr != s.size() && s[ptr] == '0') {
        ptr ++;
    }

    i32 ans = 0;
    if(is_neg) {
        ans = - $i32 (s[ptr] - '0');
        for(i32 i = $i32 ptr + 1; i < $i32 s.size(); i++){
            u8 c = s[i];

            //is next char a digit?
            if(c < '0' || c > '9') {
                errno = ERR_MALFORMED;
                return -1;
            }
            i32 dig = $i32 (c - '0');

            //check for underflow
            if(ans < (I32_MIN + dig) / 10) {
                errno = ERR_RANGE;
                return -1;
            }
            ans = (ans * 10) - dig;
        }
    }
    else {
        for(i32 i = $i32 ptr; i < $i32 s.size(); i++){
            u8 c = s[i];

            //is next char a digit?
            if(c < '0' || c > '9') {
                errno = ERR_MALFORMED;
                return -1;
            }
            i32 dig = $i32 (c - '0');

            //check for overflow
            if(ans > (I32_MAX - dig) / 10) {
                errno = ERR_RANGE;
                return -1;
            }
            ans = (ans * 10) + dig;
        }
    }
    return ans;
}
