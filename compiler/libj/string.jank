#include <jstring>;

struct string {
    u64 cap;
    u64 sz;
    u8* arr;

    string() {
        this.cap = $u64 1;
        this.sz = $u64 0;
        this.arr = $u8* malloc(this.cap);
    }

    string(string& other) {
        this.cap = other.cap;
        this.sz = other.sz;
        this.arr = $u8* malloc(this.cap);
        for(u64 i = $u64 0; i < this.sz; i++) this.arr[i] = other.arr[i];
    }

    string(u8* jstr) {
        this.cap = strlen(jstr);
        this.sz = this.cap;
        if(this.cap == $u64 0) this.cap = $u64 1;
        this.arr = $u8* malloc(this.cap);
        for(u64 i = $u64 0; i < this.sz; i++) this.arr[i] = jstr[i];
    }

    string(u64 n, u8 default) {
        this.cap = n;
        this.sz = n;
        if(this.cap == $u64 0) this.cap = $u64 1;
        this.arr = $u8* malloc(this.cap);
        for(u64 i = $u64 0; i < this.sz; i++) this.arr[i] = default;
    }

    string(i32 n, u8 default) {
        this.cap = $u64 n;
        this.sz = $u64 n;
        if(this.cap == $u64 0) this.cap = $u64 1;
        this.arr = $u8* malloc(this.cap);
        for(u64 i = $u64 0; i < this.sz; i++) this.arr[i] = default;
    }

    ~string() {
        free($void* this.arr, this.cap);
    }

    void grow() {
        u64 old_cap = this.cap;
        this.cap = this.cap * $u64 2;
        u8* narr = $u8* malloc(this.cap);
        for(u64 i = $u64 0; i < this.sz; i++) {
            narr[i] = this.arr[i];
        }
        free($void* this.arr, old_cap);
        this.arr = narr;
    }

    void pop_back() {
        if(this.sz == $u64 0) return;
        this.sz = this.sz - $u64 1;
    }

    void push_back(u8 x) {
        if(this.sz == this.cap) this.grow();
        this.arr[this.sz] = x;
        this.sz = this.sz + $u64 1;
    }

    u64 size() {
        return this.sz; 
    }

    u8* jstr() {
        u8* ret = $u8* malloc(this.sz + $u64 1);
        for(u64 i = $u64 0; i < this.sz; i++){
            ret[i] = this.arr[i];
        }
        ret[this.sz] = '\0';
        return ret;
    }

    void reverse() {
        for(u64 i = $u64 0; i < this.sz / $u64 2; i++){
            u8 tmp = this[i];
            this[i] = this[this.sz - $u64 1 - i];
            this[this.sz - $u64 1 - i] = tmp;
        }
    }
}

u8& operator[](string& a, u64 ind) {
    return a.arr[ind];
}

u8& operator[](string& a, i32 ind) {
    return a.arr[ind];
}

[-1] u64 U64_MAX = $u64 -1;
[-1] u32 U32_MAX = $u32 -1;
[-1] u16 U16_MAX = $u16 -1;
[-1] u8 U8_MAX = $u8 -1;

[-1] i32 I32_MAX = 2147483647;
[-1] i32 I32_MIN = -2147483647 - 1;

//if s is not a valid unsigned integer, sets ERR_MALFORMED
//if s is out of range, sets ERR_RANGE
//leading '0's are 
u64 stou64(string s) {
    //is string empty?
    if(s.size() == $u64 0) {
        errno = ERR_MALFORMED;
        return $u64 -1;
    }
    u64 ptr = $u64 0;

    u64 ans = $u64 0;
    for(i32 i = 0; i < $i32 s.size(); i++){
        u8 c = s[i];

        //is next char a digit?
        if(c < '0' || c > '9') {
            errno = ERR_MALFORMED;
            return $u64 -1;
        }
        u64 dig = $u64 (c - '0');
        
        //check for overflow
        if(ans > (U64_MAX - dig) / $u64 10) {
            errno = ERR_RANGE;
            return $u64 -1;
        }
        ans = ans * $u64 10 + $u64 (c - '0');
    }
    return ans;
}

//if s is not a valid signed integer, sets ERR_MALFORMED
//if s is out of range, sets ERR_RANGE
i32 stoi32(string s) {
    //is string empty?
    if(s.size() == $u64 0) {
        errno = ERR_MALFORMED;
        return -1;
    }
    u64 ptr = $u64 0;

    //is negative?
    i32 is_neg = 0;
    if(s[ptr] == '-') {
        is_neg = 1;
        ptr ++;
    }

    //are there no digits?
    if(s.size() == ptr) {
        errno = ERR_MALFORMED;
        return -1;
    }

    //skip leading '0's
    while(ptr != s.size() && s[ptr] == '0') {
        ptr ++;
    }

    i32 ans = 0;
    if(is_neg) {
        ans = - $i32 (s[ptr] - '0');
        for(i32 i = $i32 ptr + 1; i < $i32 s.size(); i++){
            u8 c = s[i];

            //is next char a digit?
            if(c < '0' || c > '9') {
                errno = ERR_MALFORMED;
                return -1;
            }
            i32 dig = $i32 (c - '0');

            //check for underflow
            if(ans < (I32_MIN + dig) / 10) {
                errno = ERR_RANGE;
                return -1;
            }
            ans = (ans * 10) - dig;
        }
    }
    else {
        for(i32 i = $i32 ptr; i < $i32 s.size(); i++){
            u8 c = s[i];

            //is next char a digit?
            if(c < '0' || c > '9') {
                errno = ERR_MALFORMED;
                return -1;
            }
            i32 dig = $i32 (c - '0');

            //check for overflow
            if(ans > (I32_MAX - dig) / 10) {
                errno = ERR_RANGE;
                return -1;
            }
            ans = (ans * 10) + dig;
        }
    }
    return ans;
}
