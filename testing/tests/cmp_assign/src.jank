
//we should treat any compound assignment operator as it's own operator. 
//for example, don't elaborate
// x += 5
//into
// x = (x + 5)
//as evaluating x may have side effects

//we can just treat the assignment operator '=' as a special case, and leave the compound
//assignment operators as normal binary operators. The auto typecasting will be conferred onto
//them via operator overload lookup

void assert(int x) {
    if(!x) {
        puts_endl("assert failed");
        sys_exit(1);
    }
}

int foo() {
    int x = 4;
    return x *= 3;
}

void basic_tests() {
    {
        // basic compound assignments
        int a = 5;
        a += 3;    
        assert(a == 8);
        a -= 2;  
        assert(a == 6);
        a *= 4;    
        assert(a == 24);
        a /= 6;  
        assert(a == 4);
        a %= 3;   
        assert(a == 1);
        a <<= 4;
        assert(a == 16);
        a >>= 2;
        assert(a == 4);
        a |= 7;
        assert(a == 7);
        a &= 5;
        assert(a == 5);
        a ^= 15;
        assert(a == 10);
    }

    {   
        // chained compound assignments
        int x = 5;
        int b = 10;
        b += x *= 2;
        assert(x == 10);
        assert(b == 20);
    }

    {
        // compound assignments in expressions
        int x = 7;
        int y = (x += 3) * 2; 
        assert(x == 10);
        assert(y == 20);
    }

    {
        // compound assignments with negative
        int p = 10;
        p -= 15;  
        assert(p == -5);
        p *= 0;      
        assert(p == 0);
        p += 20;    
        assert(p == 20);
    }

    {
        // compound assignment with self ref
        int q = 3;
        q *= q;
        assert(q == 9);
    }

    {
        //compound assignment in return statement
        assert(foo() == 12);
    }

    puts_endl("basic tests passed");
}

void arr_test() {
    //here, the correct output should be
    /*
    1
    0
    0
    */

    int n = 3;
    int* a = (int*) malloc(sizeof(int) * n);
    for(int i = 0; i < n; i++) a[i] = 0;
    int x = 0;
    a[x++] += 1;
    assert(a[0] == 1);
    assert(a[1] == 0);
    assert(a[2] == 0);

    puts_endl("arr test passed");
}

int main() {

    basic_tests();
    arr_test();
    puts_endl("all tests passed");

    return 0;
}