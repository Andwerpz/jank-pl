
void assert(int x) {
    if(!x) {
        puts_endl("assert failed");
        sys_exit(1);
    }
}

struct ostream {
    ostream() {
        // do nothing
    }
    ostream(ostream& other) {
        // do nothing
    }
}

ostream& operator<<(ostream& stream, int x) {
    puti(x);
    return stream;
}

ostream& operator<<(ostream& stream, char* s) {
    puts(s);
    return stream;
}

template<T>
struct vector {
    int cap;
    int sz;
    T* arr;

    vector() {
        this.cap = 1;
        this.sz = 0;
        this.arr = malloc(sizeof(T) * 1);
    }
    vector(vector& other) {
        this.cap = other.cap;
        this.sz = other.sz;
        this.arr = malloc(sizeof(T) * this.cap);
        for(int i = 0; i < this.cap; i++) this.arr[i] = other.arr[i];
    }
    vector(int n, T default) {
        this.cap = n;
        this.sz = n;
        this.arr = malloc(sizeof(T) * n);
        for(int i = 0; i < n; i++) this.arr[i] = default;
    }
}

int& operator[](vector<int>& a, int ind) {
    return a.arr[ind];
}

vector<int>& operator[](vector<vector<int>>& a, int ind) {
    return a.arr[ind];
}

int main() {

    int n = 10;
    ostream cout = new ostream();
    vector<vector<int>> dp = new vector<vector<int>>(n, new vector<int>(n, 0));

    dp[0][0] = 1;
    for(int i = 0; i < n; i++){
        for(int j = 0; j < n; j++){
            if(i != 0) dp[i][j] += dp[i - 1][j];
            if(j != 0) dp[i][j] += dp[i][j - 1];
        }
    }
    for(int i = 0; i < n; i++){
        for(int j = 0; j < n; j++){
            cout << dp[i][j] << " ";
        }
        cout << "\n";
    }

    return 0;
}