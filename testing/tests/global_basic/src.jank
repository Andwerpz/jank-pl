#include <put>;
#include <jstring>;
#include <vector>;
#include <iostream>;
#include <assert>;

i32 basic = 10;
i32 cntr = 0;

#global_node A;
#global_node B [A, MALLOC];

[A] u64 arrsz = $u64 100;
[B] vector<i32> arr = new vector<i32>(arrsz, 0);

void foo() {
    cntr ++;
}

void bar() {
    cntr ++;
}

void test_basic() {
    //check that global variables can be mutated
    {
        basic += 20;
        assert(basic == 30);
    }

    //check if global variables are available in multiple functions
    {
        foo();
        foo();
        bar();
        assert(cntr == 3);
    }

    //check that structs and templates work properly
    {
        for(i32 i = 0; i < $i32 arrsz; i++){
            arr[i] = i * i;
        }
        for(i32 i = 0; i < $i32 arrsz; i++){
            assert(arr[i] == i * i);
        }
    }

    cout << "test basic passed\n";
}

i32 main() {

    test_basic();
    cout << "all tests passed\n";

    return 0;
}