#include <iostream>;
#include <random>;
#include <assert>;

//assignment update, sum query segment tree
template<T>
struct segtree {
    i32 n;
    T* a;
    fn<T(T, T)> fcombine;
    fn<T(T, T)> fmodify;

    segtree(i32 n, fn<T(T, T)> fcombine, fn<T(T, T)> fmodify) {
        this.n = n;
        this.a = $T* malloc(sizeof(T) * $u64 2 * $u64 this.n);
        for(i32 i = 0; i < 2 * n; i++) this.a[i] = new T();
        this.fcombine = fcombine;
        this.fmodify = fmodify;
    }
    segtree(segtree& other) {
        this.n = other.n;
        this.a = $T* malloc(sizeof(T) * $u64 2 * $u64 this.n);
        for(i32 i = 0; i < 2 * this.n; i++) this.a[i] = other.a[i];
        this.fcombine = other.fcombine;
        this.fmodify = other.fmodify;
    }
    ~segtree() {
        free($void* this.a, sizeof(T) * $u64 2 * $u64 this.n);
    }

    //query range [l, r)
    T query(i32 l, i32 r) {
        T ans = new T();
        l = l + this.n;
        r = r + this.n;
        for(; l < r;) {
            if(l % 2 == 1) {
                ans = this.fcombine#(this.a[l], ans);
                l = l + 1;
            }
            if(r % 2 == 1) {
                r = r - 1;
                ans = this.fcombine#(ans, this.a[r]);
            }
            l = l / 2;
            r = r / 2;
        }
        return ans;
    }

    //modify element ind
    void modify(i32 ind, T val) {
        ind = ind + this.n;
        this.a[ind] = this.fmodify#(this.a[ind], val);
        ind = ind / 2;
        while(ind > 0) {
            this.a[ind] = this.fcombine#(this.a[ind * 2], this.a[ind * 2 + 1]);
            ind = ind / 2;
        }
    }
}

struct adder {
    fn<i32(i32, i32)> adder;
    adder(fn<i32(i32, i32)> adder) {
        this.adder = adder;
    }
    adder(adder& other) {
        this.adder = other.adder;
    }

    i32 add(i32 x, i32 y) {
        return this.adder#(x, y);
    }
}

template<T>
struct templated_adder {
    fn<T(T, T)> adder;
    templated_adder(fn<T(T, T)> adder) {
        this.adder = adder;
    }
    templated_adder(templated_adder& other) {
        this.adder = other.adder;
    }

    i32 add(i32 x, i32 y) {
        return this.adder#(x, y);
    }
}

//pseudorandom array
i32* gen_arr(i32 n) {
    i32* a = $i32* malloc(sizeof(i32) * $u64 n);
    i32 mod = 100007;
    i32 ptr = 1;
    i32 mult = 67;
    i32 add = 103;
    for(i32 i = 0; i < n; i = i + 1) {
        ptr = (ptr * mult + add) % mod;
        a[i] = ptr;
    }
    return a;
}

i32 combine_add(i32 x, i32 y) {
    return x + y;
}

i32 combine_max(i32 x, i32 y) {
    if(x > y) return x;
    return y;
}

i32 modify_assign(i32 src, i32 val) {
    return val;
}

i32 modify_increment(i32 src, i32 val) {
    return src + val;
}

i32 gen_rand_i32() {
    return rand_i32();
}

void test_basic() {
    {
        i32 x = 1;
        i32 y = 2;
        fn<i32(i32, i32)> adder = #<combine_add(i32, i32)>;
        assert(adder#(x, y) == 3);
    }

    {
        fn<i32(i32, i32)> adder = #<combine_add(i32, i32)>;
        for(i32 i = 1; i < 100; i++){
            for(i32 j = 1; j < 100; j++){
                assert(adder#(i / j, j * i) == i / j + j * i);
            }
        }
    }

    {
        adder a = new adder(#<combine_add(i32, i32)>);
        for(i32 i = 0; i < 10; i++){
            assert(a.add(i, i) == combine_add(i, i));
        }
    }

    {
        adder a = new adder(#<combine_add(i32, i32)>);
        i32* arr = $i32* malloc(sizeof(i32) * $u64 10);
        for(i32 i = 0; i < 10; i++) arr[i] = i;
        for(i32 i = 0; i < 10; i++){
            assert(a.add(arr[i], arr[i]) == combine_add(arr[i], arr[i]));
        }
    }

    {
        templated_adder<i32> a = new templated_adder<i32>(#<combine_add(i32, i32)>);
        for(i32 i = 0; i < 10; i++) {
            assert(a.add(i, i) == combine_add(i, i));
        }
    }

    cout << "basic test passed\n";
}

template<T>
void test_segtree(i32 n, fn<T()> gen_rand, fn<T(T, T)> fcombine, fn<T(T, T)> fmodify) {
    vector<T> a = new vector<T>(n, new T());
    segtree<T> b = new segtree<T>(n, fcombine, fmodify);

    for(i32 _ = 0; _ < 5; _++){
        for(i32 i = 0; i < n; i++){
            T val = gen_rand#();
            a[i] = fmodify#(a[i], val);
            b.modify(i, val);
        }

        for(i32 i = 0; i < n * 5; i++){
            i32 l = rand_i32() % n;
            i32 r = rand_i32() % n;
            if(l > r) {
                i32 tmp = l;
                l = r;
                r = tmp;
            }

            T aans = new T();
            for(i32 j = l; j < r; j++){
                aans = fcombine#(aans, a[j]);
            }
            T bans = b.query(l, r);

            assert(aans == bans);
        }
    }
}

void segt_test() {
    i32 n = 500;

    //sum query, assignment modify
    test_segtree(n, #<gen_rand_i32()>, #<combine_add(i32, i32)>, #<modify_assign(i32, i32)>);

    //max query, increment modify
    test_segtree(n, #<gen_rand_i32()>, #<combine_max(i32, i32)>, #<modify_increment(i32, i32)>);

    cout << "segt test passed\n";
}

i32 main() {
    
    test_basic();
    segt_test();
    cout << "all tests passed\n";

    return 0;
}