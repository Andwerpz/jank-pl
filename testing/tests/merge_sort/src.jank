

//merge sort
void sort(i64* a, i64 n) {
    if(n == 1) {
        return;
    }
    i64 lsz = n / 2;
    i64 rsz = n - lsz;
    i64* l = (i64*) malloc(lsz * sizeof(i64));
    i64* r = (i64*) malloc(rsz * sizeof(i64));
    for(i64 i = 0; i < lsz; i = i + 1) {
        l[i] = a[i];
    }
    for(i64 i = 0; i < rsz; i = i + 1){
        r[i] = a[i + lsz];
    }
    sort(l, lsz);
    sort(r, rsz);
    i64 lptr = 0;
    i64 rptr = 0;
    for(i64 i = 0; i < n; i = i + 1) {
        if(rptr == rsz) {
            a[i] = l[lptr];
            lptr = lptr + 1;
        }
        else if(lptr == lsz) {
            a[i] = r[rptr];
            rptr = rptr + 1;
        }
        else if(l[lptr] < r[rptr]) {
            a[i] = l[lptr];
            lptr = lptr + 1;
        }
        else {
            a[i] = r[rptr];
            rptr = rptr + 1;
        }
    }
}

i64 main() {
    i64 N = 1000;
    i64* a = (i64*) malloc(N * sizeof(i64));
    
    //pseudorandom array
    {
        i64 mod = 100007;
        i64 ptr = 1;
        i64 mult = 67;
        i64 add = 103;
        for(i64 i = 0; i < N; i = i + 1) {
            ptr = (ptr * mult + add) % mod;
            a[i] = ptr;
        }
    }
    
    sort(a, N);
    for(i64 i = 0; i < N; i = i + 1) {
        puti_endl(a[i]);
    }

    return 0;
}