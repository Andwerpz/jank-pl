

u8* to_string(u64 x) {
    u8* str = (u8*) malloc((u64) 21);
    i32 ptr = 20;
    str[ptr --] = (u8) 0;
    if(x == (u64) 0) {
        str[ptr] = '0';
        return @(str[ptr]);
    }
    while(x != (u64) 0) {
        str[ptr --] = '0' + (u8) (x % (u64) 10);
        x /= (u64) 10;
    }
    return @(str[ptr + 1]);
}

u64 strlen(u8* str) {
    u64 ans = (u64) 0;
    for(i32 i = 0; str[i] != '\0'; i++) {
        ans ++;
    }
    return ans;
}

//use for sanity checking
u8* to_string_bad(f32 f) {
    //preallocate some memory
    u8* str = (u8*) malloc(sizeof(u8) * (u64) 30);

    str[15] = '.';

    //extract the integer portion
    i32 str_start = 0;
    {
        i32 a = (i32) f;
        u8* int_str = int_to_string(a);
        u64 len = strlen(int_str);
        str_start = 15 - (i32) len;
        for(i32 i = 0; i < (i32) len; i++) {
            str[str_start + i] = int_str[i];
        }
    }

    //extract the <1 portion
    if(f < 0.0) f *= -1.0;
    f -= (f32) (i32) f;

    i32 frac_int = (i32) (f * 1000000.0);
    for(i32 i = 0; i < 6; i++){
        str[15 + 6 - i] = (u8) ((i32) '0' + (frac_int % 10));
        frac_int /= 10;
    }
    str[15 + 6 + 1] = '\0';

    return @str[str_start];
}

void print_bits(u32 bits) {
    for(i32 i = 31; i >= 0; i--){
        if(bits & (u32) (1 << i)) puts("1");
        else puts("0");
    }
    puts_endl("");
}

void print_bits(f32 f){
    print_bits(* (u32*) @f);
}

void print_bits(i32 x) {
    print_bits((u32) x);
}

//jank implementation of float to string
//each float consists of
// - 1 sign bit
// - 8 exponent bits
// - 23 mantissa bits (+1 implied bit) 

//normally, the value represented is equal to
// (-1)^sign + 2^(exp - 127) * (1 + mantissa / 2^23)
//except for when exp == 0, then the value is 
// (-1)^sign + 2^(-126) * (mantissa / 2^23)
//and when exp == 255, the value is 
// (-1)^sign * inf

//so my idea is to construct the base 2 representation of the float, this is exact. 
//can then represent the integer portion exactly using decimal,
//represent the fractional portion approximately by using bigint addition
//currently doesn't have bigint addition, so can only accurately print floats of magnitude up to 2^60
//also doesn't account for denormalization, NaN, inf. 
u8* to_string(f32 f) {
    u32 fbits = * (u32*) (@f);

    //print_bits(fbits);

    u32 sign = (fbits & (u32) (1 << 31));
    u32 exp = (fbits & (u32) (((1 << 8) - 1) << 23));
    u32 mantissa = (fbits & (u32) ((1 << 23) - 1));

    //print_bits(sign);
    //print_bits(exp);
    //print_bits(mantissa);

    sign >>= (u32) 31;
    exp >>= (u32) 23;
    mantissa >>= (u32) 0;
    mantissa |= (u32) (1 << 23);    //implied bit

    //generate exact base2 representation 
    u8* base2 = (u8*) malloc((u64) 512);
    for(i32 i = 0; i < 512; i++){
        base2[i] = (u8) 0;
    }

    u64 zind = (u64) 255;
    for(u32 i = (u32) 0; i < (u32) 24; i++){
        u64 ind = zind + (u64) exp - (u64) 127 + (u64) i - (u64) 23;
        if(mantissa & (u32) (1 << (i32) i)) base2[ind] = (u8) 1;
    }

    //generate int portion
    u64 int_por = (u64) 0;
    for(i32 i = 0; i < 60; i++){
        if(base2[i + (i32) zind]) int_por += ((u64) 1 << (u64) i);
    }

    //generate fractional portion
    i32 frac_precision = 13;
    u64 frac_por = (u64) 0;
    u64 pow2 = (u64) 1;
    for(i32 i = 0; i < frac_precision; i++){
        pow2 *= (u64) 10;
    }
    pow2 /= (u64) 2;
    for(i32 i = (i32) zind - 1; i >= 0; i--){
        if(base2[i]) frac_por += pow2;
        pow2 /= (u64) 2;
    }

    u8* int_str = to_string(int_por);
    u8* frac_str = to_string(frac_por);

    i32 int_len = (i32) strlen(int_str);
    i32 frac_len = (i32) strlen(frac_str);
    i32 len = int_len + frac_len + 1;
    if(sign) len += 1;

    u8* out_str = (u8*) malloc((u64) (len + 1));
    i32 ptr = 0;
    if(sign) out_str[ptr ++] = '-';
    for(i32 i = 0; i < int_len; i++) out_str[ptr ++] = int_str[i];
    out_str[ptr ++] = '.';
    for(i32 i = 0; i < frac_len; i++) out_str[ptr ++] = frac_str[i];
    out_str[ptr ++] = (u8) 0;
    
    return out_str;
}

void root2() {
    f32 low = 0.0;
    f32 high = 2.0;
    f32 epsilon = 0.000001;
    while(high - low > epsilon) {
        f32 mid = low + (high - low) / 2.0;
        if(mid * mid > 2.0) high = mid;
        else low = mid;
    }
    puts_endl(to_string(low));
}

i32 main() {

    root2();

    puts_endl(to_string(-4142.1383));

    return 0;
}