

i64 strlen(u8* str) {
    i64 ans = 0;
    for(i64 i = 0; str[i] != '\0'; i++) {
        ans ++;
    }
    return ans;
}

u8* to_string(f32 f) {
    //preallocate some memory
    u8* str = (u8*) malloc(sizeof(u8) * 30);

    str[15] = '.';

    //extract the integer portion
    i64 str_start = 0;
    {
        i64 a = (i64) f;
        u8* int_str = int_to_string(a);
        i64 len = strlen(int_str);
        str_start = 15 - len;
        for(i64 i = 0; i < len; i++) {
            str[str_start + i] = int_str[i];
        }
    }

    //extract the <1 portion
    if(f < 0.0) f *= -1.0;
    f -= (f32) (i64) f;

    i64 frac_int = (i64) (f * 1000000.0);
    for(i64 i = 0; i < 6; i++){
        str[15 + 6 - i] = (u8) ((i64) '0' + (frac_int % 10));
        frac_int /= 10;
    }
    str[15 + 6 + 1] = '\0';

    return @str[str_start];
}

i64 main() {

    f32 a = 1.0;
    a *= 3.1415;

    puti_endl((i64) a);

    f32 b = (f32) 10;
    puti_endl((i64) b);

    f32 epsilon = 0.000001;

    puts_endl(to_string(1234.0007));

    puts_endl(to_string(1000.000));

    return 0;
}